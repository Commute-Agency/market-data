{
  "version": 3,
  "sources": ["../bin/live-reload.js", "../src/index.ts"],
  "sourcesContent": ["new EventSource(`${SERVE_ORIGIN}/esbuild`).addEventListener('change', () => location.reload());\n", "// TypeScript example for Chart.js\n//import { Chart, registerables } from 'chart.js';\n\n// Register components\n//Chart.register(...registerables);\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const Chart: any; // Declare Chart globally for TypeScript to avoid errors\n\n/**\n * Waits for the Chart.js library to load and initializes the charts.\n */\nfunction waitForChartJsAndInitialize(timeout = 6000, interval = 50): void {\n  const startTime = Date.now();\n\n  const checkChartJs = () => {\n    if (typeof Chart !== 'undefined') {\n      // eslint-disable-next-line no-console\n      console.log('Chart.js is loaded. Initializing charts...');\n      initializeCharts(); // Call the main chart initialization function\n    } else if (Date.now() - startTime < timeout) {\n      setTimeout(checkChartJs, interval); // Retry after the interval\n    } else {\n      console.error('Chart.js library did not load within the timeout period.');\n    }\n  };\n\n  checkChartJs();\n}\n\n/**\n * Main function to initialize all charts from embedded JSON data.\n */\nfunction initializeCharts(): void {\n  // Select all chart items\n  const chartItems = document.querySelectorAll<HTMLDivElement>('.chart-item');\n\n  chartItems.forEach((chartItem) => {\n    const canvasId = `${chartItem.id}-canvas`; // Unique canvas ID\n    const canvas = document.getElementById(canvasId) as HTMLCanvasElement;\n    const scriptTag = chartItem.querySelector<HTMLScriptElement>('.chart-data');\n\n    if (canvas && scriptTag) {\n      try {\n        const chartData = JSON.parse(scriptTag.textContent.replace(/&quot;/g, '\"') || '{}');\n        // Extract data for the chart\n        const labels = chartData.map((data) => data[scriptTag.dataset.label]) || [];\n        const values = chartData.map((data) => data[scriptTag.dataset.value]) || [];\n        initializeChart(canvas, labels, values, chartItem.id);\n        scriptTag.remove(); // Remove the script tag after processing\n      } catch (error) {\n        console.error(`Error parsing JSON for chart ID: ${chartItem.id}`, error);\n      }\n    }\n  });\n}\n\n/**\n * Initialize a Chart.js chart.\n * @param canvas - HTMLCanvasElement where the chart will render.\n * @param labels - Array of labels for the x-axis.\n * @param data - Array of data values for the chart.\n * @param chartId - Unique ID for the chart (for logging/debugging purposes).\n */\nfunction initializeChart(\n  canvas: HTMLCanvasElement,\n  labels: string[],\n  data: number[],\n  chartId: string\n): void {\n  const ctx = canvas.getContext('2d');\n  if (!ctx) {\n    console.error(`Canvas context not found for chart ID: ${chartId}`);\n    return;\n  }\n\n  // Create gradient for the chart background\n  const gradient = ctx.createLinearGradient(0, 0, 0, 400);\n  gradient.addColorStop(0, 'rgba(0, 192, 0, 0.7)'); // Top color\n  gradient.addColorStop(1, 'rgba(0, 192, 0, 0.1)'); // Bottom transparent color\n\n  // Initialize Chart.js chart\n  new Chart(ctx, {\n    type: 'line',\n    data: {\n      labels: labels,\n      datasets: [\n        {\n          label: ``,\n          data: data,\n          borderColor: 'rgba(0, 192, 0, 0.7)',\n          backgroundColor: gradient,\n          fill: true,\n          tension: 0.4,\n          pointRadius: 0,\n          //hoverRadius: 7,\n        },\n      ],\n    },\n    options: {\n      responsive: true,\n      scales: {\n        x: {\n          grid: { display: false },\n          title: { display: false, text: 'Time' },\n          ticks: {\n            maxTicksLimit: 10,\n            padding: -30,\n            z: 10,\n            callback: function (value, index) {\n              return index === 0 ? '' : this.getLabelForValue(value);\n            },\n          },\n        },\n        y: {\n          grid: { display: false },\n          title: { display: false, text: 'Values' },\n        },\n      },\n      plugins: {\n        legend: { display: false, position: 'top' },\n      },\n      interaction: {\n        intersect: false,\n        mode: 'index',\n      },\n    },\n  });\n}\n\n// Run the check for Chart.js after DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => waitForChartJsAndInitialize());\n"],
  "mappings": "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",
  "names": []
}
